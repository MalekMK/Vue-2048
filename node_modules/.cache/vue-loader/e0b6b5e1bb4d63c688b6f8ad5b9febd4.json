{"remainingRequest":"/home/mk/Desktop/2048/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mk/Desktop/2048/src/components/game.vue?vue&type=style&index=0&id=68c94b02&scoped=true&lang=css&","dependencies":[{"path":"/home/mk/Desktop/2048/src/components/game.vue","mtime":1568557676740},{"path":"/home/mk/Desktop/2048/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/mk/Desktop/2048/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mk/Desktop/2048/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mk/Desktop/2048/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mk/Desktop/2048/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.cell {\n  width: 80px;\n  height: 80px;\n  border: solid #000;\n  display: inline-block;\n  margin: 5px;\n}\n.row {\n  height: 90px;\n  margin: 5px 0;\n}\n.settings {\n  position: absolute;\n  left: 200px;\n  top: 150px;\n}\n.radioInput {\n  margin-left: 30px;\n}\n.cellItem {\n  position: absolute;\n}\n.nameInput {\n  width: 70%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  display: inline-block;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n.submitButton {\n  width: 70%;\n  background-color: #4caf50;\n  color: white;\n  padding: 14px 20px;\n  margin: 8px 0;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.submitButton:hover {\n  background-color: #42b983;\n}\n*:focus {\n  outline: none;\n}\n",{"version":3,"sources":["game.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"game.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div>\n      <div class=\"settings\">\n      <button style=\"padding:10px 80px\" @click=\"buttonClicked()\">{{buttonValue}}</button>\n      <div style=\"padding:40px 0\">\n        <input\n          @click=\"changeGridLength()\"\n          class=\"radioInput\"\n          type=\"radio\"\n          id=\"three\"\n          :value=\"3\"\n          v-model=\"gridLength\"\n        />\n        <label for=\"three\">3</label>\n        <input\n          @click=\"changeGridLength()\"\n          class=\"radioInput\"\n          type=\"radio\"\n          id=\"four\"\n          :value=\"4\"\n          v-model=\"gridLength\"\n        />\n        <label for=\"four\">4</label>\n        <input\n          @click=\"changeGridLength()\"\n          class=\"radioInput\"\n          type=\"radio\"\n          id=\"five\"\n          :value=\"5\"\n          v-model=\"gridLength\"\n        />\n        <label for=\"five\">5</label>\n      </div>\n      <div v-bind:style=\"{ display: isActive}\">\n      <label for=\"fname\">Name</label>\n      <br/>\n      <input\n        class=\"nameInput\"\n        type=\"text\"\n        id=\"name\"\n        name=\"name\"\n        placeholder=\"Your name..\"\n        v-model=\"name\"\n      />\n      <button class=\"submitButton\" @click=\"submit\">Submit</button>\n    </div>\n    </div>\n    </div>\n    <div ref=\"grid\" tabindex=\"0\" v-on:keyup=\"keypressed\" style=\"position:relative\">\n      <div class=\"row\" v-for=\"(n) in gridLength\" :key=\"n+(gridLength*gridLength)\">\n        <div class=\"cell\" v-for=\"(n,index) in gridLength\" :key=\"index\"></div>\n      </div>\n      <cell-tab class=\"cellItem\" v-for=\"(cell,index) in cells\" :key=\"index\" :cell=\"cell\" />\n    </div>\n    <div style=\"position:relative;padding-top:30px;text-align:center;\">\n      <pre style=\"font-weight: bold;font-size:20px\"><span style=\"color:red\">Score : </span>{{this.score}}</pre>\n    </div>\n    <div style=\"position:relative;text-align:center;font-weight: bold;font-size:40px;color:red\">\n      <span v-bind:style=\"{ display: isActive}\">Game Over</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport CellTab from \"./cell\";\nconst axios = require(\"axios\");\nexport default {\n  name: \"game\",\n  watch: {\n    gridLength() {\n      this.$emit(\"gridChange\", this.gridLength);\n    },\n    cells() {\n      if (this.cells.length == this.gridLength ** 2 && this.verifyGameOver()) {\n        setTimeout(() => {\n          // alert(\"Game Over :p\")\n          this.isActive = \"inline-block\";\n        }, 100);\n      }\n    }\n  },\n  mounted() {\n    this.$emit(\"gridChange\", this.gridLength);\n  },\n  methods: {\n    submit() {\n      axios\n        .post(\"http://localhost:3000/\", {\n          name: this.name,\n          score: this.score,\n          gridSize: this.gridLength\n        })\n        .then(function(response) {\n          console.log(response);\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n      location.reload();\n    },\n    generateCell(position) {\n      let found = true;\n      let cell = {};\n      while (found) {\n        if (position === \"up\") {\n          cell = {\n            x: Math.floor(Math.random() * this.gridLength),\n            y: Math.floor(\n              (1 - Math.random() * Math.random()) * this.gridLength\n            ),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        } else if (position === \"down\") {\n          cell = {\n            x: Math.floor(Math.random() * this.gridLength),\n            y: Math.floor(Math.random() * Math.random() * this.gridLength),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        } else if (position === \"left\") {\n          cell = {\n            x: Math.floor(\n              (1 - Math.random() * Math.random()) * this.gridLength\n            ),\n            y: Math.floor(Math.random() * this.gridLength),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        } else {\n          cell = {\n            x: Math.floor(Math.random() * Math.random() * this.gridLength),\n            y: Math.floor(Math.random() * this.gridLength),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        }\n        found = this.cells.find(c => cell.x === c.x && cell.y === c.y);\n      }\n      return cell;\n    },\n    initialTabPositionUp() {\n      let positionTab = new Array(this.gridLength).fill(0);\n      for (let x = 0; x < this.gridLength; x++) {\n        for (let y = 0; y < this.gridLength; y++) {\n          let found = this.cells.find(cell => cell.x === x && cell.y === y);\n          if (found) {\n            positionTab[x] = found.y + 1;\n          }\n        }\n      }\n      return positionTab;\n    },\n    initialTabPositionDown() {\n      let positionTab = new Array(this.gridLength).fill(this.gridLength - 1);\n      for (let x = 0; x < this.gridLength; x++) {\n        for (let y = this.gridLength - 1; y >= 0; y--) {\n          let found = this.cells.find(cell => cell.x === x && cell.y === y);\n          if (found) {\n            positionTab[x] = found.y - 1;\n          }\n        }\n      }\n      return positionTab;\n    },\n    initialTabPositionLeft() {\n      let positionTab = new Array(this.gridLength).fill(0);\n      for (let y = 0; y < this.gridLength; y++) {\n        for (let x = 0; x < this.gridLength; x++) {\n          let found = this.cells.find(cell => cell.x === x && cell.y === y);\n          if (found) {\n            positionTab[y] = found.x + 1;\n          }\n        }\n      }\n      return positionTab;\n    },\n    initialTabPositionRight() {\n      let positionTab = new Array(this.gridLength).fill(this.gridLength - 1);\n      for (let y = 0; y < this.gridLength; y++) {\n        for (let x = this.gridLength - 1; x >= 0; x--) {\n          let found = this.cells.find(cell => cell.x === x && cell.y === y);\n          if (found) {\n            positionTab[y] = found.x - 1;\n          }\n        }\n      }\n      return positionTab;\n    },\n    keypressed(event) {\n      switch (event.key) {\n        case \"ArrowUp\":\n          let initialPositionUp = this.initialTabPositionUp();\n          let positionTabUp = new Array(this.gridLength).fill(0);\n          let valueTabUp = new Array(this.gridLength).fill(0);\n          for (let x = 0; x < this.gridLength; x++) {\n            let modifiedUp = false;\n            for (let y = 0; y < this.gridLength; y++) {\n              let found = this.cells.find(cell => cell.x === x && cell.y === y);\n              if (found) {\n                if (valueTabUp[x] === found.val && !modifiedUp) {\n                  modifiedUp = true;\n                  found.val = 2 * valueTabUp[x];\n                  this.score += found.val;\n                  let index = NaN;\n                  this.cells.find((cell, i) => {\n                    index = i;\n                    return cell.y === positionTabUp[x] - 1 && cell.x === x;\n                  });\n                  this.cells.splice(index, 1);\n                  found.y = positionTabUp[x] - 1;\n                } else {\n                  found.y = positionTabUp[x];\n                  positionTabUp[x]++;\n                  modifiedUp = false;\n                }\n                valueTabUp[x] = found.val;\n              }\n            }\n          }\n          if (\n            this.cells.length !== this.gridLength ** 2 &&\n            !(\n              JSON.stringify(initialPositionUp) == JSON.stringify(positionTabUp)\n            )\n          ) {\n            this.cells.push(this.generateCell(\"up\"));\n          }\n          break;\n        case \"ArrowDown\":\n          let initialPositionDown = this.initialTabPositionDown();\n          let positionTabDown = new Array(this.gridLength).fill(\n            this.gridLength - 1\n          );\n          let valueTabDown = new Array(this.gridLength).fill(0);\n          for (let x = 0; x < this.gridLength; x++) {\n            let modifiedDown = false;\n            for (let y = this.gridLength - 1; y >= 0; y--) {\n              let found = this.cells.find(cell => cell.x === x && cell.y === y);\n              if (found) {\n                if (valueTabDown[x] === found.val && !modifiedDown) {\n                  modifiedDown = true;\n                  found.val = 2 * valueTabDown[x];\n                  this.score += found.val;\n                  let index = NaN;\n                  this.cells.find((cell, i) => {\n                    index = i;\n                    return cell.y === positionTabDown[x] + 1 && cell.x === x;\n                  });\n                  this.cells.splice(index, 1);\n                  found.y = positionTabDown[x] + 1;\n                } else {\n                  modifiedDown = false;\n                  found.y = positionTabDown[x];\n                  positionTabDown[x]--;\n                }\n                valueTabDown[x] = found.val;\n              }\n            }\n          }\n          if (\n            this.cells.length !== this.gridLength ** 2 &&\n            !(\n              JSON.stringify(initialPositionDown) ==\n              JSON.stringify(positionTabDown)\n            )\n          ) {\n            this.cells.push(this.generateCell(\"down\"));\n          }\n          break;\n        case \"ArrowLeft\":\n          let initialPositionLeft = this.initialTabPositionLeft();\n          let positionTabLeft = new Array(this.gridLength).fill(0);\n          let valueTabLeft = new Array(this.gridLength).fill(0);\n          for (let y = 0; y < this.gridLength; y++) {\n            let modifiedLeft = false;\n            for (let x = 0; x < this.gridLength; x++) {\n              let found = this.cells.find(cell => cell.x === x && cell.y === y);\n              if (found) {\n                if (valueTabLeft[y] === found.val && !modifiedLeft) {\n                  modifiedLeft = true;\n                  found.val = 2 * valueTabLeft[y];\n                  this.score += found.val;\n                  let index = NaN;\n                  this.cells.find((cell, i) => {\n                    index = i;\n                    return cell.x === positionTabLeft[y] - 1 && cell.y === y;\n                  });\n                  this.cells.splice(index, 1);\n                  found.x = positionTabLeft[y] - 1;\n                } else {\n                  modifiedLeft = false;\n                  found.x = positionTabLeft[y];\n                  positionTabLeft[y]++;\n                }\n                valueTabLeft[y] = found.val;\n              }\n            }\n          }\n          if (\n            this.cells.length !== this.gridLength ** 2 &&\n            !(\n              JSON.stringify(initialPositionLeft) ==\n              JSON.stringify(positionTabLeft)\n            )\n          ) {\n            this.cells.push(this.generateCell(\"left\"));\n          }\n          break;\n        case \"ArrowRight\":\n          let initialPositionRight = this.initialTabPositionRight();\n          let positionTabRight = new Array(this.gridLength).fill(\n            this.gridLength - 1\n          );\n          let valueTabRight = new Array(this.gridLength).fill(0);\n          for (let y = 0; y < this.gridLength; y++) {\n            let modifiedRight = false;\n            for (let x = this.gridLength - 1; x >= 0; x--) {\n              let found = this.cells.find(cell => cell.x === x && cell.y === y);\n              if (found) {\n                if (valueTabRight[y] === found.val && !modifiedRight) {\n                  modifiedRight = true;\n                  found.val = 2 * valueTabRight[y];\n                  this.score += found.val;\n                  let index = NaN;\n                  this.cells.find((cell, i) => {\n                    index = i;\n                    return cell.x === positionTabRight[y] + 1 && cell.y === y;\n                  });\n                  this.cells.splice(index, 1);\n                  found.x = positionTabRight[y] + 1;\n                } else {\n                  modifiedRight = false;\n                  found.x = positionTabRight[y];\n                  positionTabRight[y]--;\n                }\n                valueTabRight[y] = found.val;\n              }\n            }\n          }\n          if (\n            this.cells.length !== this.gridLength ** 2 &&\n            !(\n              JSON.stringify(initialPositionRight) ==\n              JSON.stringify(positionTabRight)\n            )\n          ) {\n            this.cells.push(this.generateCell(\"right\"));\n          }\n          break;\n      }\n    },\n    buttonClicked() {\n      this.buttonValue = \"Restart\";\n      this.score = 0;\n      this.isActive = \"none\";\n      this.cells = [];\n      let cell = {\n        x: Math.floor(Math.random() * this.gridLength),\n        y: Math.floor(Math.random() * this.gridLength),\n        val: Math.round(Math.random()) * 2 + 2\n      };\n      this.cells.push(cell);\n      this.$refs.grid.focus();\n    },\n    changeGridLength() {\n      this.buttonValue = \"Start\";\n      this.cells = [];\n      this.score = 0;\n      this.isActive = \"none\";\n    },\n    verifyGameOver() {\n      for (let y = 0; y < this.gridLength; y++) {\n        for (let x = 0; x < this.gridLength; x++) {\n          let Element = this.cells.find(cell => cell.x === x && cell.y === y);\n          let findX = this.cells.find(cell => cell.x === x + 1 && cell.y === y);\n          let findY = this.cells.find(cell => cell.x === x && cell.y === y + 1);\n          if (x < this.gridLength - 1 && Element.val === findX.val) {\n            return false;\n          }\n          if (y < this.gridLength - 1 && Element.val === findY.val) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n  },\n  data() {\n    return {\n      isActive: \"none\",\n      gridLength: 3,\n      score: 0,\n      buttonValue: \"Start\",\n      name: \"\",\n      cells: [\n        // {x:0,y:0,val:8},\n        // {x:0,y:1,val:8},\n        // {x:0,y:2,val:16},\n        // {x:0,y:3,val:8},\n        // {x:0,y:4,val:32},\n        // {x:1,y:0,val:8},\n        // {x:1,y:1,val:8},\n        // {x:1,y:2,val:8},\n        // {x:1,y:3,val:8},\n        // {x:1,y:4,val:8},\n        // {x:2\",y:0,val:2048},\n        // {x:2,y:1,val:8},\n        // {x:2,y:2,val:4},\n        // {x:2,y:3,val:4}\n        // {x:2,y:4,val:32768}\n      ]\n    };\n  },\n  components: {\n    CellTab\n  }\n};\n</script>\n\n<style scoped>\n.cell {\n  width: 80px;\n  height: 80px;\n  border: solid #000;\n  display: inline-block;\n  margin: 5px;\n}\n.row {\n  height: 90px;\n  margin: 5px 0;\n}\n.settings {\n  position: absolute;\n  left: 200px;\n  top: 150px;\n}\n.radioInput {\n  margin-left: 30px;\n}\n.cellItem {\n  position: absolute;\n}\n.nameInput {\n  width: 70%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  display: inline-block;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n.submitButton {\n  width: 70%;\n  background-color: #4caf50;\n  color: white;\n  padding: 14px 20px;\n  margin: 8px 0;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.submitButton:hover {\n  background-color: #42b983;\n}\n*:focus {\n  outline: none;\n}\n</style>"]}]}