{"remainingRequest":"/home/mk/Desktop/2048/node_modules/babel-loader/lib/index.js!/home/mk/Desktop/2048/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mk/Desktop/2048/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mk/Desktop/2048/src/components/game.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mk/Desktop/2048/src/components/game.vue","mtime":1572201148524},{"path":"/home/mk/Desktop/2048/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mk/Desktop/2048/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/mk/Desktop/2048/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mk/Desktop/2048/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"/home/mk/Desktop/2048/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport CellTab from \"./cell\";\n\nvar axios = require(\"axios\");\n\nexport default {\n  name: \"game\",\n  watch: {\n    gridLength: function gridLength() {\n      this.$emit(\"gridChange\", this.gridLength);\n    },\n    cells: function cells() {\n      var _this = this;\n\n      var socket = io.connect('http://localhost:3000');\n      socket.emit('scoreChange', {\n        name: this.username,\n        score: this.score,\n        gridLength: this.gridLength\n      });\n      this.$emit(\"scoreChanged\", this.score);\n\n      if (this.cells.length == Math.pow(this.gridLength, 2) && this.verifyGameOver()) {\n        setTimeout(function () {\n          // alert(\"Game Over :p\")\n          _this.isActive = \"inline-block\";\n        }, 100);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.$emit(\"gridChange\", this.gridLength);\n  },\n  methods: {\n    submit: function submit() {\n      axios.post(\"http://localhost:3000/\", {\n        name: this.name,\n        score: this.score,\n        gridSize: this.gridLength\n      }).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n      location.reload();\n    },\n    generateCell: function generateCell(position) {\n      var found = true;\n      var cell = {};\n\n      while (found) {\n        if (position === \"up\") {\n          cell = {\n            x: Math.floor(Math.random() * this.gridLength),\n            y: Math.floor((1 - Math.random() * Math.random()) * this.gridLength),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        } else if (position === \"down\") {\n          cell = {\n            x: Math.floor(Math.random() * this.gridLength),\n            y: Math.floor(Math.random() * Math.random() * this.gridLength),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        } else if (position === \"left\") {\n          cell = {\n            x: Math.floor((1 - Math.random() * Math.random()) * this.gridLength),\n            y: Math.floor(Math.random() * this.gridLength),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        } else {\n          cell = {\n            x: Math.floor(Math.random() * Math.random() * this.gridLength),\n            y: Math.floor(Math.random() * this.gridLength),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        }\n\n        found = this.cells.find(function (c) {\n          return cell.x === c.x && cell.y === c.y;\n        });\n      }\n\n      return cell;\n    },\n    initialTabPositionUp: function initialTabPositionUp() {\n      var _this2 = this;\n\n      var positionTab = new Array(this.gridLength).fill(0);\n\n      var _loop = function _loop(x) {\n        var _loop2 = function _loop2(y) {\n          var found = _this2.cells.find(function (cell) {\n            return cell.x === x && cell.y === y;\n          });\n\n          if (found) {\n            positionTab[x] = found.y + 1;\n          }\n        };\n\n        for (var y = 0; y < _this2.gridLength; y++) {\n          _loop2(y);\n        }\n      };\n\n      for (var x = 0; x < this.gridLength; x++) {\n        _loop(x);\n      }\n\n      return positionTab;\n    },\n    initialTabPositionDown: function initialTabPositionDown() {\n      var _this3 = this;\n\n      var positionTab = new Array(this.gridLength).fill(this.gridLength - 1);\n\n      var _loop3 = function _loop3(x) {\n        var _loop4 = function _loop4(y) {\n          var found = _this3.cells.find(function (cell) {\n            return cell.x === x && cell.y === y;\n          });\n\n          if (found) {\n            positionTab[x] = found.y - 1;\n          }\n        };\n\n        for (var y = _this3.gridLength - 1; y >= 0; y--) {\n          _loop4(y);\n        }\n      };\n\n      for (var x = 0; x < this.gridLength; x++) {\n        _loop3(x);\n      }\n\n      return positionTab;\n    },\n    initialTabPositionLeft: function initialTabPositionLeft() {\n      var _this4 = this;\n\n      var positionTab = new Array(this.gridLength).fill(0);\n\n      var _loop5 = function _loop5(y) {\n        var _loop6 = function _loop6(x) {\n          var found = _this4.cells.find(function (cell) {\n            return cell.x === x && cell.y === y;\n          });\n\n          if (found) {\n            positionTab[y] = found.x + 1;\n          }\n        };\n\n        for (var x = 0; x < _this4.gridLength; x++) {\n          _loop6(x);\n        }\n      };\n\n      for (var y = 0; y < this.gridLength; y++) {\n        _loop5(y);\n      }\n\n      return positionTab;\n    },\n    initialTabPositionRight: function initialTabPositionRight() {\n      var _this5 = this;\n\n      var positionTab = new Array(this.gridLength).fill(this.gridLength - 1);\n\n      var _loop7 = function _loop7(y) {\n        var _loop8 = function _loop8(x) {\n          var found = _this5.cells.find(function (cell) {\n            return cell.x === x && cell.y === y;\n          });\n\n          if (found) {\n            positionTab[y] = found.x - 1;\n          }\n        };\n\n        for (var x = _this5.gridLength - 1; x >= 0; x--) {\n          _loop8(x);\n        }\n      };\n\n      for (var y = 0; y < this.gridLength; y++) {\n        _loop7(y);\n      }\n\n      return positionTab;\n    },\n    keypressed: function keypressed(event) {\n      var _this6 = this;\n\n      (function () {\n        switch (event.key) {\n          case \"ArrowUp\":\n            var initialPositionUp = _this6.initialTabPositionUp();\n\n            var positionTabUp = new Array(_this6.gridLength).fill(0);\n            var valueTabUp = new Array(_this6.gridLength).fill(0);\n\n            var _loop9 = function _loop9(x) {\n              var modifiedUp = false;\n\n              var _loop10 = function _loop10(y) {\n                var found = _this6.cells.find(function (cell) {\n                  return cell.x === x && cell.y === y;\n                });\n\n                if (found) {\n                  if (valueTabUp[x] === found.val && !modifiedUp) {\n                    modifiedUp = true;\n                    found.val = 2 * valueTabUp[x];\n                    _this6.score += found.val;\n                    var index = NaN;\n\n                    _this6.cells.find(function (cell, i) {\n                      index = i;\n                      return cell.y === positionTabUp[x] - 1 && cell.x === x;\n                    });\n\n                    _this6.cells.splice(index, 1);\n\n                    found.y = positionTabUp[x] - 1;\n                  } else {\n                    found.y = positionTabUp[x];\n                    positionTabUp[x]++;\n                    modifiedUp = false;\n                  }\n\n                  valueTabUp[x] = found.val;\n                }\n              };\n\n              for (var y = 0; y < _this6.gridLength; y++) {\n                _loop10(y);\n              }\n            };\n\n            for (var x = 0; x < _this6.gridLength; x++) {\n              _loop9(x);\n            }\n\n            if (_this6.cells.length !== Math.pow(_this6.gridLength, 2) && !(JSON.stringify(initialPositionUp) == JSON.stringify(positionTabUp))) {\n              _this6.cells.push(_this6.generateCell(\"up\"));\n            }\n\n            break;\n\n          case \"ArrowDown\":\n            var initialPositionDown = _this6.initialTabPositionDown();\n\n            var positionTabDown = new Array(_this6.gridLength).fill(_this6.gridLength - 1);\n            var valueTabDown = new Array(_this6.gridLength).fill(0);\n\n            var _loop11 = function _loop11(x) {\n              var modifiedDown = false;\n\n              var _loop12 = function _loop12(y) {\n                var found = _this6.cells.find(function (cell) {\n                  return cell.x === x && cell.y === y;\n                });\n\n                if (found) {\n                  if (valueTabDown[x] === found.val && !modifiedDown) {\n                    modifiedDown = true;\n                    found.val = 2 * valueTabDown[x];\n                    _this6.score += found.val;\n                    var index = NaN;\n\n                    _this6.cells.find(function (cell, i) {\n                      index = i;\n                      return cell.y === positionTabDown[x] + 1 && cell.x === x;\n                    });\n\n                    _this6.cells.splice(index, 1);\n\n                    found.y = positionTabDown[x] + 1;\n                  } else {\n                    modifiedDown = false;\n                    found.y = positionTabDown[x];\n                    positionTabDown[x]--;\n                  }\n\n                  valueTabDown[x] = found.val;\n                }\n              };\n\n              for (var y = _this6.gridLength - 1; y >= 0; y--) {\n                _loop12(y);\n              }\n            };\n\n            for (var x = 0; x < _this6.gridLength; x++) {\n              _loop11(x);\n            }\n\n            if (_this6.cells.length !== Math.pow(_this6.gridLength, 2) && !(JSON.stringify(initialPositionDown) == JSON.stringify(positionTabDown))) {\n              _this6.cells.push(_this6.generateCell(\"down\"));\n            }\n\n            break;\n\n          case \"ArrowLeft\":\n            var initialPositionLeft = _this6.initialTabPositionLeft();\n\n            var positionTabLeft = new Array(_this6.gridLength).fill(0);\n            var valueTabLeft = new Array(_this6.gridLength).fill(0);\n\n            var _loop13 = function _loop13(y) {\n              var modifiedLeft = false;\n\n              var _loop14 = function _loop14(x) {\n                var found = _this6.cells.find(function (cell) {\n                  return cell.x === x && cell.y === y;\n                });\n\n                if (found) {\n                  if (valueTabLeft[y] === found.val && !modifiedLeft) {\n                    modifiedLeft = true;\n                    found.val = 2 * valueTabLeft[y];\n                    _this6.score += found.val;\n                    var index = NaN;\n\n                    _this6.cells.find(function (cell, i) {\n                      index = i;\n                      return cell.x === positionTabLeft[y] - 1 && cell.y === y;\n                    });\n\n                    _this6.cells.splice(index, 1);\n\n                    found.x = positionTabLeft[y] - 1;\n                  } else {\n                    modifiedLeft = false;\n                    found.x = positionTabLeft[y];\n                    positionTabLeft[y]++;\n                  }\n\n                  valueTabLeft[y] = found.val;\n                }\n              };\n\n              for (var x = 0; x < _this6.gridLength; x++) {\n                _loop14(x);\n              }\n            };\n\n            for (var y = 0; y < _this6.gridLength; y++) {\n              _loop13(y);\n            }\n\n            if (_this6.cells.length !== Math.pow(_this6.gridLength, 2) && !(JSON.stringify(initialPositionLeft) == JSON.stringify(positionTabLeft))) {\n              _this6.cells.push(_this6.generateCell(\"left\"));\n            }\n\n            break;\n\n          case \"ArrowRight\":\n            var initialPositionRight = _this6.initialTabPositionRight();\n\n            var positionTabRight = new Array(_this6.gridLength).fill(_this6.gridLength - 1);\n            var valueTabRight = new Array(_this6.gridLength).fill(0);\n\n            var _loop15 = function _loop15(y) {\n              var modifiedRight = false;\n\n              var _loop16 = function _loop16(x) {\n                var found = _this6.cells.find(function (cell) {\n                  return cell.x === x && cell.y === y;\n                });\n\n                if (found) {\n                  if (valueTabRight[y] === found.val && !modifiedRight) {\n                    modifiedRight = true;\n                    found.val = 2 * valueTabRight[y];\n                    _this6.score += found.val;\n                    var index = NaN;\n\n                    _this6.cells.find(function (cell, i) {\n                      index = i;\n                      return cell.x === positionTabRight[y] + 1 && cell.y === y;\n                    });\n\n                    _this6.cells.splice(index, 1);\n\n                    found.x = positionTabRight[y] + 1;\n                  } else {\n                    modifiedRight = false;\n                    found.x = positionTabRight[y];\n                    positionTabRight[y]--;\n                  }\n\n                  valueTabRight[y] = found.val;\n                }\n              };\n\n              for (var x = _this6.gridLength - 1; x >= 0; x--) {\n                _loop16(x);\n              }\n            };\n\n            for (var y = 0; y < _this6.gridLength; y++) {\n              _loop15(y);\n            }\n\n            if (_this6.cells.length !== Math.pow(_this6.gridLength, 2) && !(JSON.stringify(initialPositionRight) == JSON.stringify(positionTabRight))) {\n              _this6.cells.push(_this6.generateCell(\"right\"));\n            }\n\n            break;\n        }\n      })();\n    },\n    buttonClicked: function buttonClicked() {\n      this.buttonValue = \"Restart\";\n      this.score = 0;\n      this.isActive = \"none\";\n      this.cells = [];\n      var cell = {\n        x: Math.floor(Math.random() * this.gridLength),\n        y: Math.floor(Math.random() * this.gridLength),\n        val: Math.round(Math.random()) * 2 + 2\n      };\n      this.cells.push(cell);\n      this.$refs.grid.focus();\n    },\n    changeGridLength: function changeGridLength() {\n      this.buttonValue = \"Start\";\n      this.cells = [];\n      this.score = 0;\n      this.isActive = \"none\";\n    },\n    verifyGameOver: function verifyGameOver() {\n      var _this7 = this;\n\n      var _loop17 = function _loop17(y) {\n        var _loop18 = function _loop18(x) {\n          var Element = _this7.cells.find(function (cell) {\n            return cell.x === x && cell.y === y;\n          });\n\n          var findX = _this7.cells.find(function (cell) {\n            return cell.x === x + 1 && cell.y === y;\n          });\n\n          var findY = _this7.cells.find(function (cell) {\n            return cell.x === x && cell.y === y + 1;\n          });\n\n          if (x < _this7.gridLength - 1 && Element.val === findX.val) {\n            return {\n              v: {\n                v: false\n              }\n            };\n          }\n\n          if (y < _this7.gridLength - 1 && Element.val === findY.val) {\n            return {\n              v: {\n                v: false\n              }\n            };\n          }\n        };\n\n        for (var x = 0; x < _this7.gridLength; x++) {\n          var _ret2 = _loop18(x);\n\n          if (_typeof(_ret2) === \"object\") return _ret2.v;\n        }\n      };\n\n      for (var y = 0; y < this.gridLength; y++) {\n        var _ret = _loop17(y);\n\n        if (_typeof(_ret) === \"object\") return _ret.v;\n      }\n\n      return true;\n    }\n  },\n  data: function data() {\n    return {\n      isActive: \"none\",\n      gridLength: 3,\n      score: 0,\n      username: \"testtt\",\n      buttonValue: \"Start\",\n      name: \"\",\n      cells: [// {x:0,y:0,val:8},\n        // {x:0,y:1,val:8},\n        // {x:0,y:2,val:16},\n        // {x:0,y:3,val:8},\n        // {x:0,y:4,val:32},\n        // {x:1,y:0,val:8},\n        // {x:1,y:1,val:8},\n        // {x:1,y:2,val:8},\n        // {x:1,y:3,val:8},\n        // {x:1,y:4,val:8},\n        // {x:2\",y:0,val:2048},\n        // {x:2,y:1,val:8},\n        // {x:2,y:2,val:4},\n        // {x:2,y:3,val:4}\n        // {x:2,y:4,val:32768}\n      ]\n    };\n  },\n  components: {\n    CellTab: CellTab\n  }\n};",{"version":3,"sources":["game.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA,OAAA,OAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,UADA,wBACA;AACA,WAAA,KAAA,CAAA,YAAA,EAAA,KAAA,UAAA;AACA,KAHA;AAIA,IAAA,KAJA,mBAIA;AAAA;;AACA,UAAA,MAAA,GAAA,EAAA,CAAA,OAAA,CAAA,uBAAA,CAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,aAAA,EAAA;AACA,QAAA,IAAA,EAAA,KAAA,QADA;AAEA,QAAA,KAAA,EAAA,KAAA,KAFA;AAGA,QAAA,UAAA,EAAA,KAAA;AAHA,OAAA;AAKA,WAAA,KAAA,CAAA,cAAA,EAAA,KAAA,KAAA;;AACA,UAAA,KAAA,KAAA,CAAA,MAAA,aAAA,KAAA,UAAA,EAAA,CAAA,KAAA,KAAA,cAAA,EAAA,EAAA;AACA,QAAA,UAAA,CAAA,YAAA;AACA;AACA,UAAA,KAAA,CAAA,QAAA,GAAA,cAAA;AACA,SAHA,EAGA,GAHA,CAAA;AAIA;AACA;AAlBA,GAFA;AAsBA,EAAA,OAtBA,qBAsBA;AACA,SAAA,KAAA,CAAA,YAAA,EAAA,KAAA,UAAA;AACA,GAxBA;AAyBA,EAAA,OAAA,EAAA;AACA,IAAA,MADA,oBACA;AACA,MAAA,KAAA,CACA,IADA,CACA,wBADA,EACA;AACA,QAAA,IAAA,EAAA,KAAA,IADA;AAEA,QAAA,KAAA,EAAA,KAAA,KAFA;AAGA,QAAA,QAAA,EAAA,KAAA;AAHA,OADA,EAMA,IANA,CAMA,UAAA,QAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,QAAA;AACA,OARA,EASA,KATA,CASA,UAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AACA,OAXA;AAYA,MAAA,QAAA,CAAA,MAAA;AACA,KAfA;AAgBA,IAAA,YAhBA,wBAgBA,QAhBA,EAgBA;AACA,UAAA,KAAA,GAAA,IAAA;AACA,UAAA,IAAA,GAAA,EAAA;;AACA,aAAA,KAAA,EAAA;AACA,YAAA,QAAA,KAAA,IAAA,EAAA;AACA,UAAA,IAAA,GAAA;AACA,YAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,KAAA,KAAA,UAAA,CADA;AAEA,YAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CACA,CAAA,IAAA,IAAA,CAAA,MAAA,KAAA,IAAA,CAAA,MAAA,EAAA,IAAA,KAAA,UADA,CAFA;AAKA,YAAA,GAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,EAAA,IAAA,CAAA,GAAA;AALA,WAAA;AAOA,SARA,MAQA,IAAA,QAAA,KAAA,MAAA,EAAA;AACA,UAAA,IAAA,GAAA;AACA,YAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,KAAA,KAAA,UAAA,CADA;AAEA,YAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,KAAA,IAAA,CAAA,MAAA,EAAA,GAAA,KAAA,UAAA,CAFA;AAGA,YAAA,GAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,EAAA,IAAA,CAAA,GAAA;AAHA,WAAA;AAKA,SANA,MAMA,IAAA,QAAA,KAAA,MAAA,EAAA;AACA,UAAA,IAAA,GAAA;AACA,YAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CACA,CAAA,IAAA,IAAA,CAAA,MAAA,KAAA,IAAA,CAAA,MAAA,EAAA,IAAA,KAAA,UADA,CADA;AAIA,YAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,KAAA,KAAA,UAAA,CAJA;AAKA,YAAA,GAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,EAAA,IAAA,CAAA,GAAA;AALA,WAAA;AAOA,SARA,MAQA;AACA,UAAA,IAAA,GAAA;AACA,YAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,KAAA,IAAA,CAAA,MAAA,EAAA,GAAA,KAAA,UAAA,CADA;AAEA,YAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,KAAA,KAAA,UAAA,CAFA;AAGA,YAAA,GAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,EAAA,IAAA,CAAA,GAAA;AAHA,WAAA;AAKA;;AACA,QAAA,KAAA,GAAA,KAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AAAA,SAAA,CAAA;AACA;;AACA,aAAA,IAAA;AACA,KApDA;AAqDA,IAAA,oBArDA,kCAqDA;AAAA;;AACA,UAAA,WAAA,GAAA,IAAA,KAAA,CAAA,KAAA,UAAA,EAAA,IAAA,CAAA,CAAA,CAAA;;AADA,iCAEA,CAFA;AAAA,qCAGA,CAHA;AAIA,cAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,mBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AAAA,WAAA,CAAA;;AACA,cAAA,KAAA,EAAA;AACA,YAAA,WAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA,GAAA,CAAA;AACA;AAPA;;AAGA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,iBAAA,CAAA;AAKA;AARA;;AAEA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,cAAA,CAAA;AAOA;;AACA,aAAA,WAAA;AACA,KAhEA;AAiEA,IAAA,sBAjEA,oCAiEA;AAAA;;AACA,UAAA,WAAA,GAAA,IAAA,KAAA,CAAA,KAAA,UAAA,EAAA,IAAA,CAAA,KAAA,UAAA,GAAA,CAAA,CAAA;;AADA,mCAEA,CAFA;AAAA,qCAGA,CAHA;AAIA,cAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,mBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AAAA,WAAA,CAAA;;AACA,cAAA,KAAA,EAAA;AACA,YAAA,WAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA,GAAA,CAAA;AACA;AAPA;;AAGA,aAAA,IAAA,CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AAAA,iBAAA,CAAA;AAKA;AARA;;AAEA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,eAAA,CAAA;AAOA;;AACA,aAAA,WAAA;AACA,KA5EA;AA6EA,IAAA,sBA7EA,oCA6EA;AAAA;;AACA,UAAA,WAAA,GAAA,IAAA,KAAA,CAAA,KAAA,UAAA,EAAA,IAAA,CAAA,CAAA,CAAA;;AADA,mCAEA,CAFA;AAAA,qCAGA,CAHA;AAIA,cAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,mBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AAAA,WAAA,CAAA;;AACA,cAAA,KAAA,EAAA;AACA,YAAA,WAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA,GAAA,CAAA;AACA;AAPA;;AAGA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,iBAAA,CAAA;AAKA;AARA;;AAEA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,eAAA,CAAA;AAOA;;AACA,aAAA,WAAA;AACA,KAxFA;AAyFA,IAAA,uBAzFA,qCAyFA;AAAA;;AACA,UAAA,WAAA,GAAA,IAAA,KAAA,CAAA,KAAA,UAAA,EAAA,IAAA,CAAA,KAAA,UAAA,GAAA,CAAA,CAAA;;AADA,mCAEA,CAFA;AAAA,qCAGA,CAHA;AAIA,cAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,mBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AAAA,WAAA,CAAA;;AACA,cAAA,KAAA,EAAA;AACA,YAAA,WAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA,GAAA,CAAA;AACA;AAPA;;AAGA,aAAA,IAAA,CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AAAA,iBAAA,CAAA;AAKA;AARA;;AAEA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,eAAA,CAAA;AAOA;;AACA,aAAA,WAAA;AACA,KApGA;AAqGA,IAAA,UArGA,sBAqGA,KArGA,EAqGA;AAAA;;AAAA;AACA,gBAAA,KAAA,CAAA,GAAA;AACA,eAAA,SAAA;AACA,gBAAA,iBAAA,GAAA,MAAA,CAAA,oBAAA,EAAA;;AACA,gBAAA,aAAA,GAAA,IAAA,KAAA,CAAA,MAAA,CAAA,UAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AACA,gBAAA,UAAA,GAAA,IAAA,KAAA,CAAA,MAAA,CAAA,UAAA,EAAA,IAAA,CAAA,CAAA,CAAA;;AAHA,yCAIA,CAJA;AAKA,kBAAA,UAAA,GAAA,KAAA;;AALA,6CAMA,CANA;AAOA,oBAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,yBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AAAA,iBAAA,CAAA;;AACA,oBAAA,KAAA,EAAA;AACA,sBAAA,UAAA,CAAA,CAAA,CAAA,KAAA,KAAA,CAAA,GAAA,IAAA,CAAA,UAAA,EAAA;AACA,oBAAA,UAAA,GAAA,IAAA;AACA,oBAAA,KAAA,CAAA,GAAA,GAAA,IAAA,UAAA,CAAA,CAAA,CAAA;AACA,oBAAA,MAAA,CAAA,KAAA,IAAA,KAAA,CAAA,GAAA;AACA,wBAAA,KAAA,GAAA,GAAA;;AACA,oBAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA,EAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,CAAA;AACA,6BAAA,IAAA,CAAA,CAAA,KAAA,aAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AACA,qBAHA;;AAIA,oBAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;;AACA,oBAAA,KAAA,CAAA,CAAA,GAAA,aAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA,mBAXA,MAWA;AACA,oBAAA,KAAA,CAAA,CAAA,GAAA,aAAA,CAAA,CAAA,CAAA;AACA,oBAAA,aAAA,CAAA,CAAA,CAAA;AACA,oBAAA,UAAA,GAAA,KAAA;AACA;;AACA,kBAAA,UAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA,GAAA;AACA;AA1BA;;AAMA,mBAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,wBAAA,CAAA;AAqBA;AA3BA;;AAIA,iBAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,qBAAA,CAAA;AAwBA;;AACA,gBACA,MAAA,CAAA,KAAA,CAAA,MAAA,cAAA,MAAA,CAAA,UAAA,EAAA,CAAA,KACA,EACA,IAAA,CAAA,SAAA,CAAA,iBAAA,KAAA,IAAA,CAAA,SAAA,CAAA,aAAA,CADA,CAFA,EAKA;AACA,cAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,YAAA,CAAA,IAAA,CAAA;AACA;;AACA;;AACA,eAAA,WAAA;AACA,gBAAA,mBAAA,GAAA,MAAA,CAAA,sBAAA,EAAA;;AACA,gBAAA,eAAA,GAAA,IAAA,KAAA,CAAA,MAAA,CAAA,UAAA,EAAA,IAAA,CACA,MAAA,CAAA,UAAA,GAAA,CADA,CAAA;AAGA,gBAAA,YAAA,GAAA,IAAA,KAAA,CAAA,MAAA,CAAA,UAAA,EAAA,IAAA,CAAA,CAAA,CAAA;;AALA,2CAMA,CANA;AAOA,kBAAA,YAAA,GAAA,KAAA;;AAPA,6CAQA,CARA;AASA,oBAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,yBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AAAA,iBAAA,CAAA;;AACA,oBAAA,KAAA,EAAA;AACA,sBAAA,YAAA,CAAA,CAAA,CAAA,KAAA,KAAA,CAAA,GAAA,IAAA,CAAA,YAAA,EAAA;AACA,oBAAA,YAAA,GAAA,IAAA;AACA,oBAAA,KAAA,CAAA,GAAA,GAAA,IAAA,YAAA,CAAA,CAAA,CAAA;AACA,oBAAA,MAAA,CAAA,KAAA,IAAA,KAAA,CAAA,GAAA;AACA,wBAAA,KAAA,GAAA,GAAA;;AACA,oBAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA,EAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,CAAA;AACA,6BAAA,IAAA,CAAA,CAAA,KAAA,eAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AACA,qBAHA;;AAIA,oBAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;;AACA,oBAAA,KAAA,CAAA,CAAA,GAAA,eAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA,mBAXA,MAWA;AACA,oBAAA,YAAA,GAAA,KAAA;AACA,oBAAA,KAAA,CAAA,CAAA,GAAA,eAAA,CAAA,CAAA,CAAA;AACA,oBAAA,eAAA,CAAA,CAAA,CAAA;AACA;;AACA,kBAAA,YAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA,GAAA;AACA;AA5BA;;AAQA,mBAAA,IAAA,CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AAAA,wBAAA,CAAA;AAqBA;AA7BA;;AAMA,iBAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,sBAAA,CAAA;AAwBA;;AACA,gBACA,MAAA,CAAA,KAAA,CAAA,MAAA,cAAA,MAAA,CAAA,UAAA,EAAA,CAAA,KACA,EACA,IAAA,CAAA,SAAA,CAAA,mBAAA,KACA,IAAA,CAAA,SAAA,CAAA,eAAA,CAFA,CAFA,EAMA;AACA,cAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CAAA;AACA;;AACA;;AACA,eAAA,WAAA;AACA,gBAAA,mBAAA,GAAA,MAAA,CAAA,sBAAA,EAAA;;AACA,gBAAA,eAAA,GAAA,IAAA,KAAA,CAAA,MAAA,CAAA,UAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AACA,gBAAA,YAAA,GAAA,IAAA,KAAA,CAAA,MAAA,CAAA,UAAA,EAAA,IAAA,CAAA,CAAA,CAAA;;AAHA,2CAIA,CAJA;AAKA,kBAAA,YAAA,GAAA,KAAA;;AALA,6CAMA,CANA;AAOA,oBAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,yBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AAAA,iBAAA,CAAA;;AACA,oBAAA,KAAA,EAAA;AACA,sBAAA,YAAA,CAAA,CAAA,CAAA,KAAA,KAAA,CAAA,GAAA,IAAA,CAAA,YAAA,EAAA;AACA,oBAAA,YAAA,GAAA,IAAA;AACA,oBAAA,KAAA,CAAA,GAAA,GAAA,IAAA,YAAA,CAAA,CAAA,CAAA;AACA,oBAAA,MAAA,CAAA,KAAA,IAAA,KAAA,CAAA,GAAA;AACA,wBAAA,KAAA,GAAA,GAAA;;AACA,oBAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA,EAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,CAAA;AACA,6BAAA,IAAA,CAAA,CAAA,KAAA,eAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AACA,qBAHA;;AAIA,oBAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;;AACA,oBAAA,KAAA,CAAA,CAAA,GAAA,eAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA,mBAXA,MAWA;AACA,oBAAA,YAAA,GAAA,KAAA;AACA,oBAAA,KAAA,CAAA,CAAA,GAAA,eAAA,CAAA,CAAA,CAAA;AACA,oBAAA,eAAA,CAAA,CAAA,CAAA;AACA;;AACA,kBAAA,YAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA,GAAA;AACA;AA1BA;;AAMA,mBAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,wBAAA,CAAA;AAqBA;AA3BA;;AAIA,iBAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,sBAAA,CAAA;AAwBA;;AACA,gBACA,MAAA,CAAA,KAAA,CAAA,MAAA,cAAA,MAAA,CAAA,UAAA,EAAA,CAAA,KACA,EACA,IAAA,CAAA,SAAA,CAAA,mBAAA,KACA,IAAA,CAAA,SAAA,CAAA,eAAA,CAFA,CAFA,EAMA;AACA,cAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CAAA;AACA;;AACA;;AACA,eAAA,YAAA;AACA,gBAAA,oBAAA,GAAA,MAAA,CAAA,uBAAA,EAAA;;AACA,gBAAA,gBAAA,GAAA,IAAA,KAAA,CAAA,MAAA,CAAA,UAAA,EAAA,IAAA,CACA,MAAA,CAAA,UAAA,GAAA,CADA,CAAA;AAGA,gBAAA,aAAA,GAAA,IAAA,KAAA,CAAA,MAAA,CAAA,UAAA,EAAA,IAAA,CAAA,CAAA,CAAA;;AALA,2CAMA,CANA;AAOA,kBAAA,aAAA,GAAA,KAAA;;AAPA,6CAQA,CARA;AASA,oBAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,yBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AAAA,iBAAA,CAAA;;AACA,oBAAA,KAAA,EAAA;AACA,sBAAA,aAAA,CAAA,CAAA,CAAA,KAAA,KAAA,CAAA,GAAA,IAAA,CAAA,aAAA,EAAA;AACA,oBAAA,aAAA,GAAA,IAAA;AACA,oBAAA,KAAA,CAAA,GAAA,GAAA,IAAA,aAAA,CAAA,CAAA,CAAA;AACA,oBAAA,MAAA,CAAA,KAAA,IAAA,KAAA,CAAA,GAAA;AACA,wBAAA,KAAA,GAAA,GAAA;;AACA,oBAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA,EAAA,CAAA,EAAA;AACA,sBAAA,KAAA,GAAA,CAAA;AACA,6BAAA,IAAA,CAAA,CAAA,KAAA,gBAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AACA,qBAHA;;AAIA,oBAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;;AACA,oBAAA,KAAA,CAAA,CAAA,GAAA,gBAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA,mBAXA,MAWA;AACA,oBAAA,aAAA,GAAA,KAAA;AACA,oBAAA,KAAA,CAAA,CAAA,GAAA,gBAAA,CAAA,CAAA,CAAA;AACA,oBAAA,gBAAA,CAAA,CAAA,CAAA;AACA;;AACA,kBAAA,aAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA,GAAA;AACA;AA5BA;;AAQA,mBAAA,IAAA,CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AAAA,wBAAA,CAAA;AAqBA;AA7BA;;AAMA,iBAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,sBAAA,CAAA;AAwBA;;AACA,gBACA,MAAA,CAAA,KAAA,CAAA,MAAA,cAAA,MAAA,CAAA,UAAA,EAAA,CAAA,KACA,EACA,IAAA,CAAA,SAAA,CAAA,oBAAA,KACA,IAAA,CAAA,SAAA,CAAA,gBAAA,CAFA,CAFA,EAMA;AACA,cAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA;AACA;;AACA;AA/JA;AADA;AAkKA,KAvQA;AAwQA,IAAA,aAxQA,2BAwQA;AACA,WAAA,WAAA,GAAA,SAAA;AACA,WAAA,KAAA,GAAA,CAAA;AACA,WAAA,QAAA,GAAA,MAAA;AACA,WAAA,KAAA,GAAA,EAAA;AACA,UAAA,IAAA,GAAA;AACA,QAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,KAAA,KAAA,UAAA,CADA;AAEA,QAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,KAAA,KAAA,UAAA,CAFA;AAGA,QAAA,GAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,EAAA,IAAA,CAAA,GAAA;AAHA,OAAA;AAKA,WAAA,KAAA,CAAA,IAAA,CAAA,IAAA;AACA,WAAA,KAAA,CAAA,IAAA,CAAA,KAAA;AACA,KApRA;AAqRA,IAAA,gBArRA,8BAqRA;AACA,WAAA,WAAA,GAAA,OAAA;AACA,WAAA,KAAA,GAAA,EAAA;AACA,WAAA,KAAA,GAAA,CAAA;AACA,WAAA,QAAA,GAAA,MAAA;AACA,KA1RA;AA2RA,IAAA,cA3RA,4BA2RA;AAAA;;AAAA,qCACA,CADA;AAAA,uCAEA,CAFA;AAGA,cAAA,OAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,mBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AAAA,WAAA,CAAA;;AACA,cAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,mBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,GAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA;AAAA,WAAA,CAAA;;AACA,cAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,mBAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AAAA,WAAA,CAAA;;AACA,cAAA,CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,CAAA,IAAA,OAAA,CAAA,GAAA,KAAA,KAAA,CAAA,GAAA,EAAA;AACA;AAAA;AAAA,mBAAA;AAAA;AAAA;AACA;;AACA,cAAA,CAAA,GAAA,MAAA,CAAA,UAAA,GAAA,CAAA,IAAA,OAAA,CAAA,GAAA,KAAA,KAAA,CAAA,GAAA,EAAA;AACA;AAAA;AAAA,mBAAA;AAAA;AAAA;AACA;AAXA;;AAEA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,8BAAA,CAAA;;AAAA;AAUA;AAZA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,2BAAA,CAAA;;AAAA;AAYA;;AACA,aAAA,IAAA;AACA;AA1SA,GAzBA;AAqUA,EAAA,IArUA,kBAqUA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,MADA;AAEA,MAAA,UAAA,EAAA,CAFA;AAGA,MAAA,KAAA,EAAA,CAHA;AAIA,MAAA,QAAA,EAAA,QAJA;AAKA,MAAA,WAAA,EAAA,OALA;AAMA,MAAA,IAAA,EAAA,EANA;AAOA,MAAA,KAAA,EAAA,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAPA,KAAA;AAyBA,GA/VA;AAgWA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA;AADA;AAhWA,CAAA","sourcesContent":["<template>\n  <div>\n    <div>\n      <div class=\"settings\">\n      <button style=\"padding:10px 80px\" @click=\"buttonClicked()\">{{buttonValue}}</button>\n      <div style=\"padding:40px 0\">\n        <input\n          @click=\"changeGridLength()\"\n          class=\"radioInput\"\n          type=\"radio\"\n          id=\"three\"\n          :value=\"3\"\n          v-model=\"gridLength\"\n        />\n        <label for=\"three\">3</label>\n        <input\n          @click=\"changeGridLength()\"\n          class=\"radioInput\"\n          type=\"radio\"\n          id=\"four\"\n          :value=\"4\"\n          v-model=\"gridLength\"\n        />\n        <label for=\"four\">4</label>\n        <input\n          @click=\"changeGridLength()\"\n          class=\"radioInput\"\n          type=\"radio\"\n          id=\"five\"\n          :value=\"5\"\n          v-model=\"gridLength\"\n        />\n        <label for=\"five\">5</label>\n      </div>\n      <div v-bind:style=\"{ display: isActive}\">\n      <label for=\"fname\">Name</label>\n      <br/>\n      <input\n        class=\"nameInput\"\n        type=\"text\"\n        id=\"name\"\n        name=\"name\"\n        placeholder=\"Your name..\"\n        v-model=\"name\"\n      />\n      <button class=\"submitButton\" @click=\"submit\">Submit</button>\n    </div>\n    </div>\n    </div>\n    <div ref=\"grid\" tabindex=\"0\" v-on:keyup=\"keypressed\" style=\"position:relative\">\n      <div class=\"row\" v-for=\"(n) in gridLength\" :key=\"n+(gridLength** 2)\">\n        <div class=\"cell\" v-for=\"(n,index) in gridLength\" :key=\"index\"></div>\n      </div>\n      <cell-tab class=\"cellItem\" v-for=\"(cell,index) in cells\" :key=\"index\" :cell=\"cell\" />\n    </div>\n    <div style=\"position:relative;padding-top:30px;text-align:center;\">\n      <pre style=\"font-weight: bold;font-size:20px\"><span style=\"color:red\">Score : </span>{{this.score}}</pre>\n    </div>\n    <div style=\"position:relative;text-align:center;font-weight: bold;font-size:40px;color:red\">\n      <span v-bind:style=\"{ display: isActive}\">Game Over</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport CellTab from \"./cell\";\nconst axios = require(\"axios\");\nexport default {\n  name: \"game\",\n  watch: {\n    gridLength() {\n      this.$emit(\"gridChange\", this.gridLength);\n    },\n    cells() {\n       let socket = io.connect('http://localhost:3000');\n      socket.emit('scoreChange', {\n      name: this.username,\n      score: this.score,\n      gridLength: this.gridLength\n      });\n      this.$emit(\"scoreChanged\", this.score);\n      if (this.cells.length == this.gridLength ** 2 && this.verifyGameOver()) {\n        setTimeout(() => {\n          // alert(\"Game Over :p\")\n          this.isActive = \"inline-block\";\n        }, 100);\n      }\n    }\n  },\n  mounted() {\n    this.$emit(\"gridChange\", this.gridLength);\n  },\n  methods: {\n    submit() {\n      axios\n        .post(\"http://localhost:3000/\", {\n          name: this.name,\n          score: this.score,\n          gridSize: this.gridLength\n        })\n        .then(function(response) {\n          console.log(response);\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n      location.reload();\n    },\n    generateCell(position) {\n      let found = true;\n      let cell = {};\n      while (found) {\n        if (position === \"up\") {\n          cell = {\n            x: Math.floor(Math.random() * this.gridLength),\n            y: Math.floor(\n              (1 - Math.random() * Math.random()) * this.gridLength\n            ),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        } else if (position === \"down\") {\n          cell = {\n            x: Math.floor(Math.random() * this.gridLength),\n            y: Math.floor(Math.random() * Math.random() * this.gridLength),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        } else if (position === \"left\") {\n          cell = {\n            x: Math.floor(\n              (1 - Math.random() * Math.random()) * this.gridLength\n            ),\n            y: Math.floor(Math.random() * this.gridLength),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        } else {\n          cell = {\n            x: Math.floor(Math.random() * Math.random() * this.gridLength),\n            y: Math.floor(Math.random() * this.gridLength),\n            val: Math.round(Math.random()) * 2 + 2\n          };\n        }\n        found = this.cells.find(c => cell.x === c.x && cell.y === c.y);\n      }\n      return cell;\n    },\n    initialTabPositionUp() {\n      let positionTab = new Array(this.gridLength).fill(0);\n      for (let x = 0; x < this.gridLength; x++) {\n        for (let y = 0; y < this.gridLength; y++) {\n          let found = this.cells.find(cell => cell.x === x && cell.y === y);\n          if (found) {\n            positionTab[x] = found.y + 1;\n          }\n        }\n      }\n      return positionTab;\n    },\n    initialTabPositionDown() {\n      let positionTab = new Array(this.gridLength).fill(this.gridLength - 1);\n      for (let x = 0; x < this.gridLength; x++) {\n        for (let y = this.gridLength - 1; y >= 0; y--) {\n          let found = this.cells.find(cell => cell.x === x && cell.y === y);\n          if (found) {\n            positionTab[x] = found.y - 1;\n          }\n        }\n      }\n      return positionTab;\n    },\n    initialTabPositionLeft() {\n      let positionTab = new Array(this.gridLength).fill(0);\n      for (let y = 0; y < this.gridLength; y++) {\n        for (let x = 0; x < this.gridLength; x++) {\n          let found = this.cells.find(cell => cell.x === x && cell.y === y);\n          if (found) {\n            positionTab[y] = found.x + 1;\n          }\n        }\n      }\n      return positionTab;\n    },\n    initialTabPositionRight() {\n      let positionTab = new Array(this.gridLength).fill(this.gridLength - 1);\n      for (let y = 0; y < this.gridLength; y++) {\n        for (let x = this.gridLength - 1; x >= 0; x--) {\n          let found = this.cells.find(cell => cell.x === x && cell.y === y);\n          if (found) {\n            positionTab[y] = found.x - 1;\n          }\n        }\n      }\n      return positionTab;\n    },\n    keypressed(event) {\n        switch (event.key) {\n        case \"ArrowUp\":\n          let initialPositionUp = this.initialTabPositionUp();\n          let positionTabUp = new Array(this.gridLength).fill(0);\n          let valueTabUp = new Array(this.gridLength).fill(0);\n          for (let x = 0; x < this.gridLength; x++) {\n            let modifiedUp = false;\n            for (let y = 0; y < this.gridLength; y++) {\n              let found = this.cells.find(cell => cell.x === x && cell.y === y);\n              if (found) {\n                if (valueTabUp[x] === found.val && !modifiedUp) {\n                  modifiedUp = true;\n                  found.val = 2 * valueTabUp[x];\n                  this.score += found.val;\n                  let index = NaN;\n                  this.cells.find((cell, i) => {\n                    index = i;\n                    return cell.y === positionTabUp[x] - 1 && cell.x === x;\n                  });\n                  this.cells.splice(index, 1);\n                  found.y = positionTabUp[x] - 1;\n                } else {\n                  found.y = positionTabUp[x];\n                  positionTabUp[x]++;\n                  modifiedUp = false;\n                }\n                valueTabUp[x] = found.val;\n              }\n            }\n          }\n          if (\n            this.cells.length !== this.gridLength ** 2 &&\n            !(\n              JSON.stringify(initialPositionUp) == JSON.stringify(positionTabUp)\n            )\n          ) {\n            this.cells.push(this.generateCell(\"up\"));\n          }\n          break;\n        case \"ArrowDown\":\n          let initialPositionDown = this.initialTabPositionDown();\n          let positionTabDown = new Array(this.gridLength).fill(\n            this.gridLength - 1\n          );\n          let valueTabDown = new Array(this.gridLength).fill(0);\n          for (let x = 0; x < this.gridLength; x++) {\n            let modifiedDown = false;\n            for (let y = this.gridLength - 1; y >= 0; y--) {\n              let found = this.cells.find(cell => cell.x === x && cell.y === y);\n              if (found) {\n                if (valueTabDown[x] === found.val && !modifiedDown) {\n                  modifiedDown = true;\n                  found.val = 2 * valueTabDown[x];\n                  this.score += found.val;\n                  let index = NaN;\n                  this.cells.find((cell, i) => {\n                    index = i;\n                    return cell.y === positionTabDown[x] + 1 && cell.x === x;\n                  });\n                  this.cells.splice(index, 1);\n                  found.y = positionTabDown[x] + 1;\n                } else {\n                  modifiedDown = false;\n                  found.y = positionTabDown[x];\n                  positionTabDown[x]--;\n                }\n                valueTabDown[x] = found.val;\n              }\n            }\n          }\n          if (\n            this.cells.length !== this.gridLength ** 2 &&\n            !(\n              JSON.stringify(initialPositionDown) ==\n              JSON.stringify(positionTabDown)\n            )\n          ) {\n            this.cells.push(this.generateCell(\"down\"));\n          }\n          break;\n        case \"ArrowLeft\":\n          let initialPositionLeft = this.initialTabPositionLeft();\n          let positionTabLeft = new Array(this.gridLength).fill(0);\n          let valueTabLeft = new Array(this.gridLength).fill(0);\n          for (let y = 0; y < this.gridLength; y++) {\n            let modifiedLeft = false;\n            for (let x = 0; x < this.gridLength; x++) {\n              let found = this.cells.find(cell => cell.x === x && cell.y === y);\n              if (found) {\n                if (valueTabLeft[y] === found.val && !modifiedLeft) {\n                  modifiedLeft = true;\n                  found.val = 2 * valueTabLeft[y];\n                  this.score += found.val;\n                  let index = NaN;\n                  this.cells.find((cell, i) => {\n                    index = i;\n                    return cell.x === positionTabLeft[y] - 1 && cell.y === y;\n                  });\n                  this.cells.splice(index, 1);\n                  found.x = positionTabLeft[y] - 1;\n                } else {\n                  modifiedLeft = false;\n                  found.x = positionTabLeft[y];\n                  positionTabLeft[y]++;\n                }\n                valueTabLeft[y] = found.val;\n              }\n            }\n          }\n          if (\n            this.cells.length !== this.gridLength ** 2 &&\n            !(\n              JSON.stringify(initialPositionLeft) ==\n              JSON.stringify(positionTabLeft)\n            )\n          ) {\n            this.cells.push(this.generateCell(\"left\"));\n          }\n          break;\n        case \"ArrowRight\":\n          let initialPositionRight = this.initialTabPositionRight();\n          let positionTabRight = new Array(this.gridLength).fill(\n            this.gridLength - 1\n          );\n          let valueTabRight = new Array(this.gridLength).fill(0);\n          for (let y = 0; y < this.gridLength; y++) {\n            let modifiedRight = false;\n            for (let x = this.gridLength - 1; x >= 0; x--) {\n              let found = this.cells.find(cell => cell.x === x && cell.y === y);\n              if (found) {\n                if (valueTabRight[y] === found.val && !modifiedRight) {\n                  modifiedRight = true;\n                  found.val = 2 * valueTabRight[y];\n                  this.score += found.val;\n                  let index = NaN;\n                  this.cells.find((cell, i) => {\n                    index = i;\n                    return cell.x === positionTabRight[y] + 1 && cell.y === y;\n                  });\n                  this.cells.splice(index, 1);\n                  found.x = positionTabRight[y] + 1;\n                } else {\n                  modifiedRight = false;\n                  found.x = positionTabRight[y];\n                  positionTabRight[y]--;\n                }\n                valueTabRight[y] = found.val;\n              }\n            }\n          }\n          if (\n            this.cells.length !== this.gridLength ** 2 &&\n            !(\n              JSON.stringify(initialPositionRight) ==\n              JSON.stringify(positionTabRight)\n            )\n          ) {\n            this.cells.push(this.generateCell(\"right\"));\n          }\n          break;\n      }\n    },\n    buttonClicked() {\n      this.buttonValue = \"Restart\";\n      this.score = 0;\n      this.isActive = \"none\";\n      this.cells = [];\n      let cell = {\n        x: Math.floor(Math.random() * this.gridLength),\n        y: Math.floor(Math.random() * this.gridLength),\n        val: Math.round(Math.random()) * 2 + 2\n      };\n      this.cells.push(cell);\n      this.$refs.grid.focus();\n    },\n    changeGridLength() {\n      this.buttonValue = \"Start\";\n      this.cells = [];\n      this.score = 0;\n      this.isActive = \"none\";\n    },\n    verifyGameOver() {\n      for (let y = 0; y < this.gridLength; y++) {\n        for (let x = 0; x < this.gridLength; x++) {\n          let Element = this.cells.find(cell => cell.x === x && cell.y === y);\n          let findX = this.cells.find(cell => cell.x === x + 1 && cell.y === y);\n          let findY = this.cells.find(cell => cell.x === x && cell.y === y + 1);\n          if (x < this.gridLength - 1 && Element.val === findX.val) {\n            return false;\n          }\n          if (y < this.gridLength - 1 && Element.val === findY.val) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n  },\n  data() {\n    return {\n      isActive: \"none\",\n      gridLength: 3,\n      score: 0,\n      username:\"testtt\",\n      buttonValue: \"Start\",\n      name: \"\",\n      cells: [\n        // {x:0,y:0,val:8},\n        // {x:0,y:1,val:8},\n        // {x:0,y:2,val:16},\n        // {x:0,y:3,val:8},\n        // {x:0,y:4,val:32},\n        // {x:1,y:0,val:8},\n        // {x:1,y:1,val:8},\n        // {x:1,y:2,val:8},\n        // {x:1,y:3,val:8},\n        // {x:1,y:4,val:8},\n        // {x:2\",y:0,val:2048},\n        // {x:2,y:1,val:8},\n        // {x:2,y:2,val:4},\n        // {x:2,y:3,val:4}\n        // {x:2,y:4,val:32768}\n      ]\n    };\n  },\n  components: {\n    CellTab\n  }\n};\n</script>\n\n<style scoped>\n.cell {\n  width: 80px;\n  height: 80px;\n  border: solid #000;\n  display: inline-block;\n  margin: 5px;\n}\n.row {\n  height: 90px;\n  margin: 5px 0;\n}\n.settings {\n  position: absolute;\n  left: 200px;\n  top: 150px;\n}\n.radioInput {\n  margin-left: 30px;\n}\n.cellItem {\n  position: absolute;\n}\n.nameInput {\n  width: 70%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  display: inline-block;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n.submitButton {\n  width: 70%;\n  background-color: #4caf50;\n  color: white;\n  padding: 14px 20px;\n  margin: 8px 0;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.submitButton:hover {\n  background-color: #42b983;\n}\n*:focus {\n  outline: none;\n}\n</style>"],"sourceRoot":"src/components"}]}